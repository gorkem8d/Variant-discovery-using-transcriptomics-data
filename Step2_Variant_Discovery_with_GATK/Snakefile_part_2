import os
import glob
import re

# Get the current user's home directory
home_dir = os.path.expanduser("~")
# Get the current user's shell
user_shell = os.environ["SHELL"]
# Modify the shell.prefix command
shell.prefix("source {}/.bash_profile; set -euo pipefail;".format(home_dir))

from util.varsub import varsub
configfile: "config.yaml"
varsub(config)

# Set global resource constraints
workflow.cores = 12  # Total cores available
workflow.global_resources = {
    "mem_mb": 250000,  # Total memory available (adjust based on your system)
    "io": 4            # Limit concurrent I/O operations
}

# Find samples based on existing BAM files in pass2 directory
bam_files = glob.glob(config['datadirs']['pass2'] + "/*_Aligned.sortedByCoord.out.bam")
SAMPLES = [re.sub(r'_Aligned\.sortedByCoord\.out\.bam$', '', os.path.basename(f)) for f in bam_files]
print("Found samples from BAM files:", SAMPLES)

# Define rule order to help scheduler make better decisions
ruleorder: mark_dups > index > splitNcigar

# Function to handle both .vcf and .vcf.gz reference files
def get_ref_file(file_path):
    """Check if file exists with or without .gz extension and return the appropriate path"""
    if os.path.exists(file_path):
        return file_path
    elif os.path.exists(file_path + ".gz"):
        return file_path + ".gz"
    elif os.path.exists(file_path[:-3]) and file_path.endswith(".gz"):
        return file_path[:-3]
    else:
        print(f"WARNING: Could not find reference file at {file_path} or with/without .gz extension")
        return file_path  # Return original path, Snakemake will handle the error

# Rules --------------------------------------------------------------------------------
rule all:
    input:
        expand(config['datadirs']['RGbam'] + "/" + "{file}_Aligned.sortedByCoord.out.RG.bam", file=SAMPLES),
        expand(config['datadirs']['dedup'] + "/" + "{file}_Aligned.sortedByCoord.out.md.bam",file=SAMPLES),
        expand(config['datadirs']['dedup'] + "/" + "{file}_Aligned.sortedByCoord.out.md.bam.bai", file=SAMPLES),
        expand(config['datadirs']['splitNcigar'] + "/" + "{file}_split.out.bam", file=SAMPLES),
        expand(config['datadirs']['Recal1'] + "/" + "{file}_recal.table", file=SAMPLES),
        expand(config['datadirs']['BQSR_1'] + "/" + "{file}_recal.pass1.bam", file=SAMPLES),
        expand(config['datadirs']['Recal2'] + "/" + "{file}_recal.table", file=SAMPLES),
        expand(config['datadirs']['BQSR_2'] + "/" + "{file}_recal.pass2.bam", file=SAMPLES),
        expand(config['datadirs']['vcf'] + "/" + "{file}.g.vcf.gz" , file=SAMPLES),
        expand(config['datadirs']['vcf'] + "/" + "{file}.g.vcf.gz.tbi" , file=SAMPLES),
        expand(config['datadirs']['filtered'] + "/" + "{file}.variant_filtered.vcf.gz" , file=SAMPLES),
        expand(config['datadirs']['filtered'] + "/" + "{file}.variant_filtered.vcf.gz.tbi" , file=SAMPLES)

# add read groups,Platform
rule AddRG:
    input:
        bam = config['datadirs']['pass2'] + "/" + "{file}_Aligned.sortedByCoord.out.bam"
    output:
        RG = config['datadirs']['RGbam'] + "/" + "{file}_Aligned.sortedByCoord.out.RG.bam"
    params: 
        "RGLB=lib1 RGPL=illumina RGPU={file} RGSM={file}"   
    threads: 4  # Allocate 1 thread - lightweight operation
    resources:
        mem_mb = 8000
    shell:"""
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/./picard -Xmx7g -XX:ParallelGCThreads=1 -XX:+UseParallelGC -XX:GCTimeRatio=19 \
        AddOrReplaceReadGroups {params} I={input.bam} O={output.RG} USE_JDK_DEFLATER=true USE_JDK_INFLATER=true
        """ 
                  
# mark duplicates
rule mark_dups:
    input:
        bam = config['datadirs']['RGbam'] + "/" + "{file}_Aligned.sortedByCoord.out.RG.bam"
    output:
        dbam = config['datadirs']['dedup'] + "/" + "{file}_Aligned.sortedByCoord.out.md.bam",
        metric = config['datadirs']['dedup'] + "/" + "{file}_Aligned.sortedByCoord.out.metrics.txt"
    threads: 4  # Allocate 2 threads
    resources:
        mem_mb = 12000
    shell: """
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/./picard -Xmx10g -XX:ParallelGCThreads=2 -XX:+UseParallelGC -XX:GCTimeRatio=19 \
        MarkDuplicates INPUT={input.bam} OUTPUT={output.dbam} METRICS_FILE={output.metric} \
        ASSUME_SORT_ORDER=coordinate OPTICAL_DUPLICATE_PIXEL_DISTANCE=100 \
        USE_JDK_DEFLATER=true USE_JDK_INFLATER=true
        """

# Index bam file using samtools
rule index:
    input:
        bam = config['datadirs']['dedup'] + "/" + "{file}_Aligned.sortedByCoord.out.md.bam"
    output:
        bai = config['datadirs']['dedup'] + "/" + "{file}_Aligned.sortedByCoord.out.md.bam.bai"
    threads: 2  # Indexing is I/O bound, not CPU bound
    resources:
        mem_mb = 8000
    shell:"""
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/./samtools index {input.bam} {output.bai} 
        """

# Splits N Cigar Reads from bam file
rule splitNcigar:
    input:
        bam = config['datadirs']['dedup'] + "/{file}_Aligned.sortedByCoord.out.md.bam",
        fasta = config['reference']['fasta']['hg38']
    output:
        SBam = config['datadirs']['splitNcigar'] + "/{file}_split.out.bam"
    threads: 2  # Use 2 threads 
    resources:
        mem_mb = 50000
    params:
        java_opts = "-Xmx45g -XX:ParallelGCThreads=2 -XX:+UseParallelGC -XX:GCTimeRatio=19"
    shell:
        """
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/java {params.java_opts} \
        -Dsamjdk.use_async_io_read_samtools=false \
        -Dsamjdk.use_async_io_write_samtools=true \
        -Dsamjdk.use_async_io_write_tribble=false \
        -Dsamjdk.compression_level=2 \
        -jar /home/gdurmaz/miniconda3/envs/snakemake_env/share/gatk4-4.5.0.0-0/gatk-package-4.5.0.0-local.jar SplitNCigarReads \
        -R {input.fasta} \
        -I {input.bam} \
        --tmp-dir $TMPDIR \
        -O {output.SBam}
        """
           
# base recalibration
rule BQSR_Pass1:         
    input:
        bam = config['datadirs']['splitNcigar'] + "/" + "{file}_split.out.bam",
        GSNPs = lambda wildcards: get_ref_file(config['reference']['1000G']['hg38']),
        Indels = lambda wildcards: get_ref_file(config['reference']['Indels']['hg38']),
        DbSNP = lambda wildcards: get_ref_file(config['reference']['DbSNP']['hg38']),
        fasta = config['reference']['fasta']['hg38']
    output:
        Recall = config['datadirs']['Recal1'] + "/" + "{file}_recal.table"
    threads: 4  # Medium computational intensity
    resources:
        mem_mb = 45000
    params:
        java_opts = "-Xmx40g -XX:ParallelGCThreads=2 -XX:+UseParallelGC -XX:GCTimeRatio=19"
    shell:"""
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/java {params.java_opts} \
        -Dsamjdk.use_async_io_read_samtools=false \
        -Dsamjdk.use_async_io_write_samtools=true \
        -Dsamjdk.use_async_io_write_tribble=false \
        -Dsamjdk.compression_level=2 \
        -jar /home/gdurmaz/miniconda3/envs/snakemake_env/share/gatk4-4.5.0.0-0/gatk-package-4.5.0.0-local.jar BaseRecalibrator \
        -I {input.bam} \
        -R {input.fasta} \
        --known-sites {input.GSNPs} \
        --known-sites {input.Indels} \
        --known-sites {input.DbSNP} \
        --tmp-dir $TMPDIR \
        -O {output.Recall}
        """
           
rule ApplyBQSR:
    input:
        bam = config['datadirs']['splitNcigar'] + "/" + "{file}_split.out.bam",
        fasta = config['reference']['fasta']['hg38'],
        recal = config['datadirs']['Recal1'] + "/" + "{file}_recal.table"
    output:
        Rbam = config['datadirs']['BQSR_1'] + "/" + "{file}_recal.pass1.bam"
    threads: 2  # Medium-light operation
    resources:
        mem_mb = 40000
    params:
        java_opts = "-Xmx35g -XX:ParallelGCThreads=2 -XX:+UseParallelGC -XX:GCTimeRatio=19"
    shell:"""
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/java {params.java_opts} \
        -Dsamjdk.use_async_io_read_samtools=false \
        -Dsamjdk.use_async_io_write_samtools=true \
        -Dsamjdk.use_async_io_write_tribble=false \
        -Dsamjdk.compression_level=2 \
        -jar /home/gdurmaz/miniconda3/envs/snakemake_env/share/gatk4-4.5.0.0-0/gatk-package-4.5.0.0-local.jar ApplyBQSR \
        -I {input.bam} \
        -R {input.fasta} \
        --bqsr-recal-file {input.recal} \
        --tmp-dir $TMPDIR \
        -O {output.Rbam}
        """           
         
#Base Recalibration 
rule BQSR_Pass2:         
    input:
        bam = config['datadirs']['BQSR_1'] + "/" + "{file}_recal.pass1.bam",
        GSNPs = lambda wildcards: get_ref_file(config['reference']['1000G']['hg38']),
        Indels = lambda wildcards: get_ref_file(config['reference']['Indels']['hg38']),
        DbSNP = lambda wildcards: get_ref_file(config['reference']['DbSNP']['hg38']),
        fasta = config['reference']['fasta']['hg38']
    output:
        Recall = config['datadirs']['Recal2'] + "/" + "{file}_recal.table"
    threads: 4  # Medium computational intensity
    resources:
        mem_mb = 45000
    params:
        java_opts = "-Xmx40g -XX:ParallelGCThreads=2 -XX:+UseParallelGC -XX:GCTimeRatio=19"
    shell:"""
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/java {params.java_opts} \
        -Dsamjdk.use_async_io_read_samtools=false \
        -Dsamjdk.use_async_io_write_samtools=true \
        -Dsamjdk.use_async_io_write_tribble=false \
        -Dsamjdk.compression_level=2 \
        -jar /home/gdurmaz/miniconda3/envs/snakemake_env/share/gatk4-4.5.0.0-0/gatk-package-4.5.0.0-local.jar BaseRecalibrator \
        -I {input.bam} \
        -R {input.fasta} \
        --known-sites {input.GSNPs} \
        --known-sites {input.Indels} \
        --known-sites {input.DbSNP} \
        --tmp-dir $TMPDIR \
        -O {output.Recall}
        """ 
           
#detects systematic errors made by the sequencer when it estimates the quality score of each base call
rule ApplyBQSR_2:
    input:
        bam = config['datadirs']['BQSR_1'] + "/" + "{file}_recal.pass1.bam",
        fasta = config['reference']['fasta']['hg38'],
        recal = config['datadirs']['Recal2'] + "/" + "{file}_recal.table"
    output:
        Rbam = config['datadirs']['BQSR_2'] + "/" + "{file}_recal.pass2.bam"
    threads: 2  # Medium-light operation
    resources:
        mem_mb = 40000
    params:
        java_opts = "-Xmx35g -XX:ParallelGCThreads=2 -XX:+UseParallelGC -XX:GCTimeRatio=19"
    shell:"""
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/java {params.java_opts} \
        -Dsamjdk.use_async_io_read_samtools=false \
        -Dsamjdk.use_async_io_write_samtools=true \
        -Dsamjdk.use_async_io_write_tribble=false \
        -Dsamjdk.compression_level=2 \
        -jar /home/gdurmaz/miniconda3/envs/snakemake_env/share/gatk4-4.5.0.0-0/gatk-package-4.5.0.0-local.jar ApplyBQSR \
        -I {input.bam} \
        -R {input.fasta} \
        --bqsr-recal-file {input.recal} \
        --tmp-dir $TMPDIR \
        -O {output.Rbam}
        """            
           
#Variant Calling - the most computationally intensive step
rule gatk_HaplotypeCaller:
    input:
        bam = config['datadirs']['BQSR_2'] + "/" + "{file}_recal.pass2.bam",
        fasta = config['reference']['fasta']['hg38'],
        dbSNP_vcf = lambda wildcards: get_ref_file(config['reference']['DbSNP']['hg38'])
    output:
        vcf = config['datadirs']['vcf'] + "/" + "{file}.g.vcf.gz",
        vcf_index = config['datadirs']['vcf'] + "/" + "{file}.g.vcf.gz.tbi"   
    threads: 2  # Optimized for throughput with 10 total cores
    resources:
        mem_mb = 45000
    params:
        java_opts = "-Xmx40g -XX:ParallelGCThreads=2 -XX:+UseParallelGC -XX:GCTimeRatio=19"
    shell:"""
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/java {params.java_opts} \
        -Dsamjdk.use_async_io_read_samtools=false \
        -Dsamjdk.use_async_io_write_samtools=true \
        -Dsamjdk.use_async_io_write_tribble=false \
        -Dsamjdk.compression_level=2 \
        -jar /home/gdurmaz/miniconda3/envs/snakemake_env/share/gatk4-4.5.0.0-0/gatk-package-4.5.0.0-local.jar HaplotypeCaller \
        -R {input.fasta} \
        -I {input.bam} \
        --native-pair-hmm-threads 2 \
        -ERC GVCF --output-mode EMIT_ALL_CONFIDENT_SITES \
        --dont-use-soft-clipped-bases \
        -stand-call-conf 20.0 \
        --tmp-dir $TMPDIR \
        -O {output.vcf}
        """           

rule VariantFiltration:
    input:
        vcf = config['datadirs']['vcf'] + "/" + "{file}.g.vcf.gz",
        vcf_index = config['datadirs']['vcf'] + "/" + "{file}.g.vcf.gz.tbi",
        fasta = config['reference']['fasta']['hg38']                
    output:
        filtrated = config['datadirs']['filtered'] + "/" + "{file}.variant_filtered.vcf.gz",
        filtrated_index = config['datadirs']['filtered'] + "/" + "{file}.variant_filtered.vcf.gz.tbi"
    threads: 2  # Medium-light operation
    resources:
        mem_mb = 35000
    params:
        java_opts = "-Xmx30g -XX:ParallelGCThreads=2 -XX:+UseParallelGC -XX:GCTimeRatio=19"
    shell:"""
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/java {params.java_opts} \
        -Dsamjdk.use_async_io_read_samtools=false \
        -Dsamjdk.use_async_io_write_samtools=true \
        -Dsamjdk.use_async_io_write_tribble=false \
        -Dsamjdk.compression_level=2 \
        -jar /home/gdurmaz/miniconda3/envs/snakemake_env/share/gatk4-4.5.0.0-0/gatk-package-4.5.0.0-local.jar VariantFiltration \
        --R {input.fasta} \
        --V {input.vcf} \
        --window 35 \
        --cluster 3 \
        --filter-name "FS" \
        --filter "FS > 30.0" \
        --filter-name "QD" \
        --filter "QD < 2.0" \
        --tmp-dir $TMPDIR \
        -O {output.filtrated}
        """