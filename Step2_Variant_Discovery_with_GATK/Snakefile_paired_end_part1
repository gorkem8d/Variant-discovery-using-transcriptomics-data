import os
import glob

# Get the current user's home directory
home_dir = os.path.expanduser("~")

# Get the current user's shell
user_shell = os.environ["SHELL"]

# Modify the shell.prefix command
shell.prefix("source {}/.bash_profile; set -euo pipefail;".format(home_dir))
from util.varsub import varsub
configfile: "config_part1.yaml"
varsub(config)

# A snakemake regular expression matching the forward mate FASTQ files.
SAMPLES, = glob_wildcards(config['datadirs']['fastq'] + "/" + "{file}_1.fastq.gz")

# Patterns for the 1st mate and the 2nd mate using the 'sample' wildcard.
READS = ["1", "2"]


# Rules --------------------------------------------------------------------------------
rule all:
    input:
        #config['reference']['stargenomedir']['hg38'] + "/" + "SAindex",
        config['datadirs']['sj_files'] + "/" + "SJ.out.pass1_merged.tab",
        expand(config['datadirs']['qc'] + "/" + "{file}_{read}_fastqc.html", file=SAMPLES, read= READS),
        expand(config['datadirs']['trim'] + "/" + "{file}_{read}_val_{read}.fq.gz", file = SAMPLES, read= READS),
        expand(config['datadirs']['bam'] + "/" + "{file}_SJ.out.tab", file = SAMPLES),
        expand(config['datadirs']['pass2'] + "/" + "{file}_Aligned.sortedByCoord.out.bam", file = SAMPLES )

# QC of raw fastq files.
rule fastqc:
    input:
      f1 = config['datadirs']['fastq'] + "/" + "{file}_{read}.fastq.gz"
    output: config['datadirs']['qc'] + "/" + "{file}_{read}_fastqc.html", config['datadirs']['qc'] + "/" + "{file}_{read}_fastqc.zip"
    params:
        prefix = config['datadirs']['qc']
    resources:
        mem_mb = 10000  # this might cause problems
    shell:
        """
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/./fastqc --thread 8 --outdir {params.prefix} --nogroup {input.f1}
        """

# Trimming of the Illumina adapters.
rule trim_galore_pe:
    input:
      f1 = config['datadirs']['fastq'] + "/" + "{file}_1.fastq.gz",
      f2 = config['datadirs']['fastq'] + "/" + "{file}_2.fastq.gz"
    output:
      fwd_pai = config['datadirs']['trim'] + "/" + "{file}_1_val_1.fq.gz",
      rev_pai = config['datadirs']['trim'] + "/" + "{file}_2_val_2.fq.gz",
    params:
        extra = " -j 8 --illumina -q 20 --phred33 --length 20",
        prefix = config['datadirs']['trim']
    resources:
        mem_mb = 20000  
    shell:
        """
        /home/gdurmaz/TrimGalore-0.6.10/trim_galore \
        --path_to_cutadapt /home/gdurmaz/miniconda3/envs/snakemake_env/bin/cutadapt \
        {params.extra} \
        --paired {input.f1} {input.f2} \
        -o {params.prefix}
        """

rule pass1:
    input:
      f1 = config['datadirs']['trim'] + "/" + "{file}_1_val_1.fq.gz",
      f2 = config['datadirs']['trim'] + "/" + "{file}_2_val_2.fq.gz",
      queue = rules.trim_galore_pe.output.rev_pai
    output: config['datadirs']['bam'] + "/" + "{file}_SJ.out.tab", config['datadirs']['bam'] + "/" + "{file}_Aligned.toTranscriptome.out.bam"
    params:
        genomedir = config['reference']['star_ref'],
        prefix = config['datadirs']['bam'] + "/" + "{file}_"
    threads: 10
    resources:
        mem_mb = 40000  # this might cause problems
    shell:
        """
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/./STAR \
        --runThreadN {threads} \
        --genomeDir {params.genomedir} \
        --readFilesIn {input.f1} {input.f2} \
        --readFilesCommand zcat \
        --outFileNamePrefix {params.prefix} \
        --outSAMtype None \
        --outSAMunmapped Within \
        --quantMode TranscriptomeSAM \
        --outSAMattributes NH HI AS NM MD \
        --outFilterType BySJout \
        --outFilterMultimapNmax 20 \
        --outFilterMismatchNmax 999 \
        --outFilterMismatchNoverReadLmax 0.04 \
        --alignIntronMin 20 \
        --alignIntronMax 1000000 \
        --alignSJoverhangMin 8 \
        --alignSJDBoverhangMin 1 \
        --sjdbScore 1 \
        --limitBAMsortRAM 50000000000
        """
# Merge the Splice junction informtaion from Pass1 Mapping  
rule SJ_Merge:
    input:
      sjs =  expand(config['datadirs']['bam'] + "/" + "{file}_SJ.out.tab" , file = SAMPLES)
    output:
      sjs=  config['datadirs']['sj_files'] + "/" + "SJ.out.pass1_merged.tab"
    threads: 1
    shell: """
         cat {input.sjs} | awk '$7 >= 3' | cut -f1-4 | sort -u > {output.sjs} \

         """



# 1. Map single-end RNA-seq reads to the genome.
# 2. Make a coordinate sorted BAM with genomic coordinates.
# 3. Count the number of reads mapped to each gene.
# 4. Count the number of reads supporting each splice junction.
rule pass2:
    input:
      f1 = config['datadirs']['trim'] + "/" + "{file}_1_val_1.fq.gz",
      f2 = config['datadirs']['trim'] + "/" + "{file}_2_val_2.fq.gz",
      line = config['reference']['stargenomedir']['hg38'] + "/" + "SAindex"
    output: config['datadirs']['pass2'] + "/" + "{file}_Aligned.toTranscriptome.out.bam", config['datadirs']['pass2'] + "/" + "{file}_Aligned.sortedByCoord.out.bam"
    params:
        genomedir = config['reference']['stargenomedir']['hg38'],
        prefix = config['datadirs']['pass2'] + "/" + "{file}_"
    threads: 10
    resources:
        mem_mb = 50000
    shell:
        """
        /home/gdurmaz/miniconda3/envs/snakemake_env/bin/./STAR \
        --runThreadN {threads} \
        --genomeDir {params.genomedir} \
        --readFilesIn {input.f1} {input.f2} \
        --readFilesCommand zcat \
        --outFileNamePrefix {params.prefix} \
        --outSAMtype BAM SortedByCoordinate \
        --outSAMunmapped Within \
        --quantMode TranscriptomeSAM \
        --outSAMattributes NH HI AS NM MD \
        --outFilterType BySJout \
        --outFilterMultimapNmax 20 \
        --outFilterMismatchNmax 999 \
        --outFilterMismatchNoverReadLmax 0.04 \
        --alignIntronMin 20 \
        --alignIntronMax 1000000 \
        --alignSJoverhangMin 8 \
        --alignSJDBoverhangMin 1 \
        --sjdbScore 1 \
        --outBAMsortingThreadN 5 \
        --limitBAMsortRAM 50000000000
        """